{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "revealedURI",
						"type": "string"
					}
				],
				"name": "TokenURIRevealed",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "key",
						"type": "bytes"
					}
				],
				"name": "encryptDecrypt",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "result",
						"type": "bytes"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "encryptedData",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_batchId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_key",
						"type": "bytes"
					}
				],
				"name": "getRevealURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "revealedURI",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_batchId",
						"type": "uint256"
					}
				],
				"name": "isEncryptedBatch",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "identifier",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "key",
						"type": "bytes"
					}
				],
				"name": "reveal",
				"outputs": [
					{
						"internalType": "string",
						"name": "revealedURI",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"encryptDecrypt(bytes,bytes)": {
					"details": "Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain",
					"params": {
						"data": "Bytes of data to encrypt/decrypt.",
						"key": "Secure key used by caller for encryption/decryption."
					},
					"returns": {
						"result": " Output after encryption/decryption of given data."
					}
				},
				"getRevealURI(uint256,bytes)": {
					"details": "Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.",
					"params": {
						"_batchId": "ID of the batch for which URI is being revealed.",
						"_key": "Secure key used by caller/admin for encryption of baseURI."
					},
					"returns": {
						"revealedURI": "Decrypted base URI."
					}
				},
				"isEncryptedBatch(uint256)": {
					"details": "Returns `true` if `_batchId`'s base URI is encrypted.",
					"params": {
						"_batchId": "ID of a batch of NFTs."
					}
				},
				"reveal(uint256,bytes)": {
					"params": {
						"identifier": "The ID for the batch of delayed-reveal NFTs to reveal.",
						"key": "The key with which the base URI for the relevant batch of NFTs was encrypted."
					}
				}
			},
			"stateVariables": {
				"encryptedData": {
					"details": "Mapping from tokenId of a batch of tokens => to delayed reveal data."
				}
			},
			"title": "Delayed Reveal",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"encryptDecrypt(bytes,bytes)": {
					"notice": "Encrypt/decrypt data on chain."
				},
				"getRevealURI(uint256,bytes)": {
					"notice": "Returns revealed URI for a batch of NFTs."
				},
				"isEncryptedBatch(uint256)": {
					"notice": "Returns whether the relvant batch of NFTs is subject to a delayed reveal."
				},
				"reveal(uint256,bytes)": {
					"notice": "Reveals a batch of delayed reveal NFTs."
				}
			},
			"notice": "Thirdweb's `DelayedReveal` is a contract extension for base NFT contracts. It lets you create batches of           'delayed-reveal' NFTs. You can learn more about the usage of delayed reveal NFTs here - https://blog.thirdweb.com/delayed-reveal-nfts",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"AVN/NFT.sol": "DelayedReveal"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"AVN/NFT.sol": {
			"keccak256": "0x9492fb076d7d7ef04b629b0a9a9cfe2b062aade89f1c8dc46d8590be4df24a8c",
			"urls": [
				"bzz-raw://ea55de353a45a1619f476eb61174364add5b39404b6f03c9525071ca760d8c77",
				"dweb:/ipfs/QmaJgoH6bqhEJRdTEfY7ximRCSnZQtn8eySwhFPdVDQAV8"
			]
		}
	},
	"version": 1
}