{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "startTimestamp",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxClaimableSupply",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "supplyClaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							}
						],
						"indexed": false,
						"internalType": "struct IClaimCondition.ClaimCondition",
						"name": "condition",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "resetEligibility",
						"type": "bool"
					}
				],
				"name": "ClaimConditionUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "claimer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "startTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "quantityClaimed",
						"type": "uint256"
					}
				],
				"name": "TokensClaimed",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_currency",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_pricePerToken",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "bytes32[]",
								"name": "proof",
								"type": "bytes32[]"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							}
						],
						"internalType": "struct IDropSinglePhase.AllowlistProof",
						"name": "_allowlistProof",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "claim",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimCondition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "startTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxClaimableSupply",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "supplyClaimed",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "quantityLimitPerWallet",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "merkleRoot",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "pricePerToken",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "currency",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "metadata",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_claimer",
						"type": "address"
					}
				],
				"name": "getSupplyClaimedByWallet",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_currency",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_pricePerToken",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "startTimestamp",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxClaimableSupply",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "supplyClaimed",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRoot",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							}
						],
						"internalType": "struct IClaimCondition.ClaimCondition",
						"name": "_condition",
						"type": "tuple"
					},
					{
						"internalType": "bool",
						"name": "_resetClaimEligibility",
						"type": "bool"
					}
				],
				"name": "setClaimConditions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_claimer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_quantity",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_currency",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_pricePerToken",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "bytes32[]",
								"name": "proof",
								"type": "bytes32[]"
							},
							{
								"internalType": "uint256",
								"name": "quantityLimitPerWallet",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "pricePerToken",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "currency",
								"type": "address"
							}
						],
						"internalType": "struct IDropSinglePhase.AllowlistProof",
						"name": "_allowlistProof",
						"type": "tuple"
					}
				],
				"name": "verifyClaim",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isOverride",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "thirdweb",
			"kind": "dev",
			"methods": {
				"claim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address),bytes)": {
					"details": "Lets an account claim tokens."
				},
				"getSupplyClaimedByWallet(address)": {
					"details": "Returns the supply claimed by claimer for active conditionId."
				},
				"setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
					"details": "Lets a contract admin set claim conditions."
				},
				"verifyClaim(address,uint256,address,uint256,(bytes32[],uint256,uint256,address))": {
					"details": "Checks a request to claim NFTs against the active claim condition's criteria."
				}
			},
			"stateVariables": {
				"claimCondition": {
					"details": "The active conditions for claiming tokens."
				},
				"conditionId": {
					"details": "The ID for the active claim condition."
				},
				"supplyClaimedByWallet": {
					"details": "Map from a claim condition uid and account to supply claimed by account."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"ClaimConditionUpdated((uint256,uint256,uint256,uint256,bytes32,uint256,address,string),bool)": {
					"notice": "Emitted when the contract's claim conditions are updated."
				},
				"TokensClaimed(address,address,uint256,uint256)": {
					"notice": "Emitted when tokens are claimed via `claim`."
				}
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"AVN/NFT.sol": "DropSinglePhase"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"AVN/NFT.sol": {
			"keccak256": "0x9492fb076d7d7ef04b629b0a9a9cfe2b062aade89f1c8dc46d8590be4df24a8c",
			"urls": [
				"bzz-raw://ea55de353a45a1619f476eb61174364add5b39404b6f03c9525071ca760d8c77",
				"dweb:/ipfs/QmaJgoH6bqhEJRdTEfY7ximRCSnZQtn8eySwhFPdVDQAV8"
			]
		}
	},
	"version": 1
}